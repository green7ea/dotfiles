# vim:fileencoding=utf-8:ft=conf

# You can get a list of full family names available on your computer by running
# kitty list-fonts
# The default values shown below rely on your OS to choose an appropriate monospace font family.
font_family      Fira Code Light
italic_font      auto
bold_font        auto
bold_italic_font auto

# Font size (in pts)
font_size        15

# Adjust the cell dimensions.
# You can use either numbers, which are interpreted as pixels or percentages
# (number followed by %), which are interpreted as percentages of the
# unmodified values. You can use negative pixels or percentages less than
# 100% to reduce sizes (but this might cause rendering artifacts).
adjust_line_height 0
adjust_column_width 0

# Change the sizes of the lines used for the box drawing unicode
# characters These values are in pts. They will be scaled by the
# monitor DPI to arrive at a pixel value. There must be four values
# corresponding to thin, normal, thick, and very thick lines;
box_drawing_scale 0.001, 1, 1.5, 2

# The cursor color
cursor           #cccccc

# The cursor shape can be one of (block, beam, underline)
cursor_shape     beam

# The interval (in seconds) at which to blink the cursor. Set to zero
# to disable blinking. Note that numbers smaller than repaint_delay
# will be limited to repaint_delay.
cursor_blink_interval     0

# Stop blinking cursor after the specified number of seconds of
# keyboard inactivity. Set to zero to never stop blinking.
cursor_stop_blinking_after 2.0

# Number of lines of history to keep in memory for scrolling back
scrollback_lines 2000

# Program with which to view scrollback in a new window. The
# scrollback buffer is passed as STDIN to this program. If you change
# it, make sure the program you use can handle ANSI escape sequences
# for colors and text formatting.
scrollback_pager less +G -R

# Wheel scroll multiplier (modify the amount scrolled by the mouse
# wheel). Use negative numbers to change scroll direction.
wheel_scroll_multiplier 5.0

# The color and style for highlighting URLs on mouse-over. url_style
# can be one of: none, single, double, curly
url_color #0087BD
url_style curly

# The modifier keys to press when clicking with the mouse on URLs to
# open the URL
open_url_modifiers kitty_mod

# The program with which to open URLs that are clicked on. The special
# value "default" means to use the operating system's default URL
# handler.
open_url_with default

# Copy to clipboard on select. With this enabled, simply selecting
# text with the mouse will cause the text to be copied to
# clipboard. Useful on platforms such as macOS/Wayland that do not
# have the concept of primary selections. Note that this is a security
# risk, as all programs, including websites open in your browser can
# read the contents of the clipboard.
copy_on_select no

# The modifiers to use rectangular selection (i.e. to select text in a
# rectangular block with the mouse)
rectangle_select_modifiers ctrl+alt

# Characters considered part of a word when double clicking. In
# addition to these characters any character that is marked as an
# alpha-numeric character in the unicode database will be matched.
select_by_word_characters :@-./_~?&=%+#

# The interval between successive clicks to detect double/triple
# clicks (in seconds)
click_interval 0.5

# Hide mouse cursor after the specified number of seconds of the mouse
# not being used. Set to zero to disable mouse cursor hiding.
mouse_hide_wait 1.0

# Set the active window to the window under the mouse when moving the
# mouse around
focus_follows_mouse no

# Delay (in milliseconds) between screen updates. Decreasing it,
# increases frames-per-second (FPS) at the cost of more CPU usage. The
# default value yields ~100 FPS which is more than sufficient for most
# uses. Note that to actually achieve 100FPS you have to either set
# sync_to_monitor to no or use a monitor with a high refresh rate.
repaint_delay    10

# Delay (in milliseconds) before input from the program running in the
# terminal is processed. Note that decreasing it will increase
# responsiveness, but also increase CPU usage and might cause flicker
# in full screen programs that redraw the entire screen on each loop,
# because kitty is so fast that partial screen updates will be drawn.
input_delay 3

# Sync screen updates to the refresh rate of the monitor. This
# prevents tearing (https://en.wikipedia.org/wiki/Screen_tearing) when
# scrolling. However, it limits the rendering speed to the refresh
# rate of your monitor. With a very high speed mouse/high keyboard
# repeat rate, you may notice some slight input latency.  If so, set
# this to no.
sync_to_monitor yes

# Visual bell duration. Flash the screen when a bell occurs for the
# specified number of seconds. Set to zero to disable.
visual_bell_duration 0.0

# Enable/disable the audio bell. Useful in environments that require
# silence.
enable_audio_bell no

# Request window attention on bell.  Makes the dock icon bounce on
# macOS or the taskbar flash on linux.
window_alert_on_bell yes

# Show a bell symbol on the tab if a bell occurs in one of the windows
# in the tab and the window is not the currently focused window
bell_on_tab yes

# If enabled, the window size will be remembered so that new instances
# of kitty will have the same size as the previous instance. If
# disabled, the window will initially have size configured by
# initial_window_width/height, in pixels.
remember_window_size   no
initial_window_width   1280
initial_window_height  700
hide_window_decorations yes

# The enabled window layouts. A comma separated list of layout
# names. The special value * means all layouts. The first listed
# layout will be used as the startup layout.  For a list of available
# layouts, see the README.
enabled_layouts *

# The width (in pts) of window borders. Will be rounded to the nearest
# number of pixels based on screen resolution.  Note that borders are
# displayed only when more than one window is visible. They are meant
# to separate multiple windows.
window_border_width 1

# The window margin (in pts) (blank area outside the border)
window_margin_width 0

# The window padding (in pts) (blank area between the text and the
# window border)
window_padding_width 1

# The color for the border of the active window
active_border_color #00ff00

# The color for the border of inactive windows
inactive_border_color #cccccc

# The color for the border of inactive windows in which a bell has
# occurred
bell_border_color #ff5a00

# Fade the text in inactive windows by the specified amount (a number
# between zero and one, with 0 being fully faded).
inactive_text_alpha 1.0

# Which edge to show the tab bar on, top or bottom
tab_bar_edge bottom

# The separator between tabs in the tab bar
tab_separator " â”‡"

# Tab bar colors and styles
active_tab_foreground #000
active_tab_background #eee
active_tab_font_style bold-italic
inactive_tab_foreground #444
inactive_tab_background #999
inactive_tab_font_style normal

# The foreground color
foreground       #D8DEE9

# The background color
background       #2E3440

# The opacity of the background. A number between 0 and 1, where 1 is
# opaque and 0 is fully transparent.  This will only work if supported
# by the OS (for instance, when using a compositor under X11). Note
# that it only sets the default background color's opacity. This is so
# that things like the status bar in vim, powerline prompts,
# etc. still look good.  But it means that if you use a color theme
# with a background color in your editor, it will not be rendered as
# transparent.  Instead you should change the default background color
# in your kitty config and not use a background color in the editor
# color scheme. Or use the escape codes to set the terminals default
# colors in a shell script to launch your editor.  Be aware that using
# a value less than 1.0 is a (possibly significant) performance hit.
background_opacity 1.0

background            #1b1b1b
foreground            #e5e1db
cursor                #ffffff
selection_background  #5a637e
color0                #000000
color8                #323232
color1                #da4839
color9                #ff7b6a
color2                #509f50
color10               #83d082
color3                #ffd249
color11               #ffff7b
color4                #6d9cbd
color12               #9fcef0
color5                #cfcfff
color13               #ffffff
color6                #6d9cbd
color14               #a0cef0
color7                #ffffff
color15               #ffffff
selection_foreground #2b2b2b

# The shell program to execute. The default value of . means to use
# whatever shell is set as the default shell for the current user.
# Note that on macOS if you change this, you might need to add --login
# to ensure that the shell starts in interactive mode and reads its
# startup rc files.
shell .

# Close the window when the child process (shell) exits. If no (the
# default), the terminal will remain open when the child exits as long
# as there are still processes outputting to the terminal (for example
# disowned or backgrounded processes). If yes, the window will close
# as soon as the child process exits.  Note that setting it to yes
# means that any background processes still using the terminal can
# fail silently because their stdout/stderr/stdin no longer work.
close_on_child_death no

# Allow other programs to control kitty. If you turn this on other
# programs can control all aspects of kitty, including sending text to
# kitty windows, opening new windows, closing windows, reading the
# content of windows, etc.  Note that this even works over ssh
# connections.
allow_remote_control no

# The value of the TERM environment variable to set. Changing this can
# break many terminal programs, only change it if you know what you
# are doing, not because you read some advice on Stack Overflow to
# change it.
term xterm-kitty

# For a list of key names, see:
# http://www.glfw.org/docs/latest/group__keys.html For a list of
# modifier names, see:
# http://www.glfw.org/docs/latest/group__mods.html

# The value of kitty_mod is used as the modifier for all default
# shortcuts, you can change it in your kitty.conf to change the
# modifiers for all the default shortcuts.
kitty_mod ctrl+shift

# You can use the special action no_op to unmap a keyboard shortcut
# that is assigned in the default configuration.
#
# You can combine multiple actions to be triggered by a single
# shortcut, using the syntax below: map key combine <separator>
# action1 <separator> action2 <separator> action3 ...  For example:
# map kitty_mod+e combine : new_window : next_layout this will create
# a new window and switch to the next available layout
#
# You can use multi-key shortcuts using the syntax shown below: map
# key1>key2>key3 action For example: map ctrl+f>2 set_font_size 20
# this will change the font size to 20 points when you press ctrl+f
# and then 2

map kitty_mod+v        paste_from_clipboard
map kitty_mod+s        paste_from_selection
map kitty_mod+c        copy_to_clipboard
map shift+insert        paste_from_selection
# You can also pass the contents of the current selection to any program using
# pass_selection_to_program. By default, the system's open program is used, but
# you can specify your own, for example:
# map kitty_mod+o      pass_selection_to_program firefox
map kitty_mod+o        pass_selection_to_program

map kitty_mod+up        scroll_line_up
map kitty_mod+down      scroll_line_down
map kitty_mod+k         scroll_line_up
map kitty_mod+j         scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end
map kitty_mod+h         show_scrollback

#map kitty_mod+equal    increase_font_size
#map kitty_mod+minus    decrease_font_size
map kitty_mod+backspace restore_font_size

map kitty_mod+u        input_unicode_character

# You can customize how the URLs are
# Open the kitty shell in a new window/tab/overlay/os_window to control kitty using commands.
map kitty_mod+escape   kitty_shell window
